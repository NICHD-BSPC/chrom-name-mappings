"""
Generate mapping file from Ensembl to UCSC chromosome names
"""

import os
import sys
import gzip
import yaml
import pandas
from snakemake.utils import makedirs


# reads that config, and for each pair of URLs downloads, does the fasta ID
# matching, and writes out the mappings file
# print(config['references']['BDGP6_to_UCSC_dm6'])


targets = []
for organism in config['references']:
    for label in config['references'][organism]:
        for name in config['references'][organism][label]['fastas']:
            targets.append(f'mappings/{organism}/{label}/mappings_{label}.tsv')


rule all:
     input: targets



rule download_refs:
    """ Download urls for each pair of Ensembl / UCSC references
    """
    output:
        'mappings/{organism}/{label}/gz/{label}_ref_{name}.fa.gz',
    run:
        url = (
            config['references'][wildcards.organism][wildcards.label]
            ['fastas'][wildcards.name]['url']
        )
        if url.startswith(('http://', 'https://', 'ftp://')):
            if url.endswith('.tar.gz'):
                shell('wget -qO- {url} | tar -xOz | gzip -c > {output}')
            else:
                shell('wget -qO- {url} > {output}')
        else:
            shell('cp {url} {output}')


rule unzip:
    """Unzip files
    """
    input:
        rules.download_refs.output
    output:
        'mappings/{organism}/{label}/unzipped/{label}_ref_{name}.fa',
    run:
        shell("gunzip -c {input} > {output}")


def get_unzipfiles(wc):
    name_a = config['references'][wc.organism][wc.label]['args']['from']
    name_b = config['references'][wc.organism][wc.label]['args']['to']
    file_a = f'mappings/{wc.organism}/{wc.label}/unzipped/{wc.label}_ref_{name_a}.fa'
    file_b = f'mappings/{wc.organism}/{wc.label}/unzipped/{wc.label}_ref_{name_b}.fa'
    return (file_a, file_b)

rule map_ids:
    input:
        get_unzipfiles
    output:
        'mappings/{organism}/{label}/mappings_{label}.tsv'
    run:
        base = output[0].replace('.tsv', '')
        name_a = config['references'][wildcards.organism][wildcards.label]['args']['from']
        name_b = config['references'][wildcards.organism][wildcards.label]['args']['to']

        a_not_b = f'{base}_{name_a}_not_{name_b}.tsv'
        b_not_a = f'{base}_{name_a}_not_{name_b}.tsv'

        filtered = f'{base}_filtered_out.tsv'

        shell(
            "python3 "
            "fasta-id-matcher-master/fasta-id-matcher.py "
            "{input[0]} "
            "{input[1]} "
            "--out_a_not_b {a_not_b} "
            "--out_b_not_a {b_not_a} "
            "--output {output} "
        )



rule map_ensembl_to_ucsc:
    """ Map chromosome names from Ensembl to UCSC reference
    """
    input:
        rules.unzip.output
    params:
        get_unzipfiles
    output:
        'mappings/{organism}/{label}/map/'
    run:
        mapping = 'mappings/'+wildcards.organism+'/'+wildcards.label+'/map/mappings_'+wildcards.label+'.tsv'
        a_not_b = ('mappings/'+wildcards.organism+'/'+wildcards.label+'/map/'
            +list(config['references'][wildcards.organism][wildcards.label][0].keys())[0]+'_not_'
            +list(config['references'][wildcards.organism][wildcards.label][1].keys())[0]+'.tsv')
        b_not_a = ('mappings/'+wildcards.organism+'/'+wildcards.label+'/map/'
            +list(config['references'][wildcards.organism][wildcards.label][1].keys())[0]+'_not_'
            +list(config['references'][wildcards.organism][wildcards.label][0].keys())[0]+'.tsv')
        filtered = 'mappings/'+wildcards.organism+'/'+wildcards.label+'/map/filtered_out.tsv'
        filterout = config['references'][wildcards.organism][wildcards.label][2]['args']['filterout']
        filterin = config['references'][wildcards.organism][wildcards.label][2]['args']['filterin']

        shell("python3 fasta-id-matcher-master/fasta-id-matcher.py {params[0][0]} {params[0][1]} --filterout {filterout} --filterin {filterin} --output {mapping} --out_a_not_b {a_not_b} --out_b_not_a {b_not_a} --out_filtered {filtered}")
        if os.stat(a_not_b).st_size != 0:
            with open(a_not_b,'rt') as tmp:
                linelist = 'Chromosome(s) "'
                for line in tmp:
                    linelist = linelist + str(line) + '\t'
            raise ValueError(
                '{label}: {linelist}" from {a} not found in {b}'
                .format(label=wildcards.label, linelist=linelist, a=list(config['references'][wildcards.organism][wildcards.label][0].keys())[0],
                b=list(config['references'][wildcards.organism][wildcards.label][1].keys())[0]))
